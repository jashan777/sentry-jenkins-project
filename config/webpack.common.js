const pathtoresolve = require('path');
const paths = require('./paths')

const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const CopyWebpackPlugin = require('copy-webpack-plugin')
const {sentryWebpackPlugin} = require("@sentry/webpack-plugin")
const HtmlWebpackPlugin = require('html-webpack-plugin')
const SystemResoucePlugin = require("./systemResoucePlugin/SystemResourceMonitorPlugin");

//const FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin');
const env = "Staging";

module.exports = {
	
  // Where webpack looks to start building the bundle and include polyfill
  entry: [ 'whatwg-fetch', paths.src + '/index.js'],

  // Where webpack outputs the assets and bundles
  output: {
    path: paths.build,
    filename: '[name].bundle.js',
    publicPath: '/',
  },
    
    
  resolve: {
        extensions: ['.js', '.jsx'],
        alias: {
            'components': pathtoresolve.resolve(__dirname, '../src/components/'),
			'images': pathtoresolve.resolve(__dirname, '../src/images/'),
		    'styles': pathtoresolve.resolve(__dirname, '../src/styles/'),
		 }
    },
	

  // Customize the webpack build process
  plugins: [
   new SystemResoucePlugin(),
	
	//new FriendlyErrorsPlugin(),
    	
    // Removes/cleans build folders and unused assets when rebuilding
    new CleanWebpackPlugin(),

    // Copies files from target to destination folder
    new CopyWebpackPlugin({
      patterns: [
        {
          from: paths.public,
          to: 'assets',
          globOptions: {
            ignore: ['*.DS_Store'],
          },
        },
      ],
    }),

    // Generates an HTML file from a template
    // Generates deprecation warning: https://github.com/jantimon/html-webpack-plugin/issues/1501
    new HtmlWebpackPlugin({
      title: 'webpack Boilerplate',
      favicon: paths.src + '/images/favicon.png',
      template: paths.src + '/template.html', // template file
      filename: 'index.html', // output file
    }),

    sentryWebpackPlugin({
      url: "https://sentry.io/",
      project: "webpack-test-2",
      authToken: "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",
      debug:true,
      // Modern sourcemaps config
      sourcemaps: {
        // In many cases, the plugin will auto-detect
        // the JS and map files generated by Webpack in your build folder
        // but you can override with:
        // or `./build/**`, etc.

        // If you want to ignore specific patterns:
        ignore: ["node_modules", "build-config", "src", "stories", "static", "locales"],
      },
      reactComponentAnnotation:{
        enabled:true
      },
      release: {
        setCommits: { auto: true },
        deploy: {
          env: "staging",
        },
      },
    }),
  ],

  // Determine how modules within the project are treated
  module: {
    rules: [
      // JavaScript: Use Babel to transpile JavaScript files
      {
		  test: /\.js$/, 
		  exclude: /node_modules/, 
		  use: ['babel-loader']},
	  
	   {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      },

      // Styles: Inject CSS into the head with source maps
      {
        test: /\.(scss|css)$/,
        use: [
          'style-loader',
          {loader: 'css-loader', options: {sourceMap: true, importLoaders: 1}},
          {loader: 'postcss-loader', options: {sourceMap: true}},
          {loader: 'sass-loader', options: {sourceMap: true}},
        ],
      },

      // Images: Copy image files to build folder
      {test: /\.(?:ico|gif|png|jpg|jpeg)$/i, type: 'asset/resource'},

      // Fonts and SVGs: Inline files
      {test: /\.(woff(2)?|eot|ttf|otf|svg|)$/, type: 'asset/inline'},
    ],
  },
}
